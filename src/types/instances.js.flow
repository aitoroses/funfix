/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import { HK } from "./kinds"
import { Option } from "../core/option"
import { Try } from "../core/try"
import { Either } from "../core/either"

export type OptionK<A> = HK<Option<any>, A>;

declare export class OptionInstances {
  eqv(lh: Option<any>, rh: Option<any>): boolean;
  pure<A>(a: A): Option<A>;
  unit(): Option<void>;
  ap<A, B>(fa: OptionK<A>, ff: OptionK<(a: A) => B>): Option<B>;
  map<A, B>(fa: OptionK<A>, f: (a: A) => B): Option<B>;
  map2<A, B, Z>(fa: OptionK<A>, fb: OptionK<B>, f: (a: A, b: B) => Z): Option<Z>;
  product<A, B>(fa: OptionK<A>, fb: OptionK<B>): Option<[A, B]>;

  static global: OptionInstances;
}

export type TryK<A> = HK<Try<any>, A>;

declare export class TryInstances {
  eqv(lh: Try<any>, rh: Try<any>): boolean;
  pure<A>(a: A): Try<A>;
  unit(): Try<void>;
  ap<A, B>(fa: TryK<A>, ff: TryK<(a: A) => B>): Try<B>;
  map<A, B>(fa: TryK<A>, f: (a: A) => B): Try<B>;
  map2<A, B, Z>(fa: TryK<A>, fb: TryK<B>, f: (a: A, b: B) => Z): Try<Z>;
  product<A, B>(fa: TryK<A>, fb: TryK<B>): Try<[A, B]>;

  static global: TryInstances;
}

export type EitherK<L, R> = HK<Either<L, any>, R>;

declare export class EitherInstances<L> {
  eqv(lh: Either<L, any>, rh: Either<L, any>): boolean;
  pure<A>(a: A): Either<L, A>;
  unit(): Either<L, void>;
  ap<A, B>(fa: EitherK<L, A>, ff: EitherK<L, (a: A) => B>): Either<L, B>;
  map<A, B>(fa: EitherK<L, A>, f: (a: A) => B): Either<L, B>;
  map2<A, B, Z>(fa: EitherK<L, A>, fb: EitherK<L, B>, f: (a: A, b: B) => Z): Either<L, Z>;
  product<A, B>(fa: EitherK<L, A>, fb: EitherK<L, B>): Either<L, [A, B]>;

  static global: EitherInstances<any>;
}
