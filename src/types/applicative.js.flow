/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import { HK } from "./kinds"
import { Functor, HasFunctor } from "./functor"

export interface Applicative<F> extends Functor<F> {
  pure<A>(a: A): HK<F, A>;
  ap<A, B>(fa: HK<F, A>, ff: HK<F, (a: A) => B>): HK<F, B>;
  map2<A, B, Z>(fa: HK<F, A>, fb: HK<F, B>, f: (a: A, b: B) => Z): HK<F, Z>;
  product<A, B>(fa: HK<F, A>, fb: HK<F, B>): HK<F, [A, B]>;
}

export interface HasApplicative<F> extends HasFunctor<F> {
  +__types: {
    functor: () => Functor<F>,
    applicative: () => Applicative<F>
  }
}

declare export function applicativeOf<F>(constructor: HasApplicative<F>): Applicative<F>;
