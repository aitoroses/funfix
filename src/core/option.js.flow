/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

declare export class Option<+A> {
  get(): A;
  getOrElse<AA : $Supertype<A>>(fallback: AA): AA;
  getOrElseL<AA : $Supertype<A>>(thunk: () => AA): AA;
  orElse<AA : $Supertype<A>>(fallback: Option<AA>): Option<AA>;
  orElseL<AA : $Supertype<A>>(thunk: () => Option<AA>): Option<AA>;
  orNull(): A | null;

  chain<B>(f: A => Option<B>): Option<B>;
  contains(elem: A): boolean;
  equals(that: Option<A>): boolean;
  exists(p: A => boolean): boolean;
  filter(p: A => boolean): Option<A>;
  flatMap<B>(f: A => Option<B>): Option<B>;
  fold<B>(fallback: () => B, f: A => B): B;
  forAll(p: A => boolean): boolean;
  forEach(cb: A => void): void;
  hashCode(): number;
  isEmpty(): boolean;
  map<B>(f: A => B): Option<B>;
  mapN<B>(f: A => B): Option<B>;
  nonEmpty(): boolean;

  static empty<A>(): Option<A>;
  static none(): Option<empty>;
  static of<A>(value: A | null | void): Option<A>;
  static pure<A>(value: A): Option<A>;
  static some<A>(value: A): Option<A>;

  static map2<A1,A2,R>(fa1: Option<A1>, fa2: Option<A2>,
    f: (A1, A2) => R): Option<R>;
  static map3<A1,A2,A3,R>(fa1: Option<A1>, fa2: Option<A2>, fa3: Option<A3>,
    f: (A1, A2, A3) => R): Option<R>;
  static map4<A1,A2,A3,A4,R>(fa1: Option<A1>, fa2: Option<A2>, fa3: Option<A3>, fa4: Option<A4>,
    f: (A1, A2, A3, A4) => R): Option<R>;
  static map5<A1,A2,A3,A4,A5,R>(
    fa1: Option<A1>, fa2: Option<A2>, fa3: Option<A3>, fa4: Option<A4>, fa5: Option<A5>,
    f: (A1, A2, A3, A4, A5) => R): Option<R>;
  static map6<A1,A2,A3,A4,A5,A6,R>(
    fa1: Option<A1>, fa2: Option<A2>, fa3: Option<A3>, fa4: Option<A4>, fa5: Option<A5>, fa6: Option<A6>,
    f: (A1, A2, A3, A4, A5, A6) => R): Option<R>;
}

declare export function Some<A>(value: A): Option<A>;
declare export var None: Option<empty>;
