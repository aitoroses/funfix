/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import { Option } from "./option"
import { Functor, Applicative, Eq, HK } from "../types"

declare export class Either<+L, +R> {
  get(): R;
  getOrElse<RR : $Supertype<R>>(fallback: RR): RR;
  getOrElseL<RR : $Supertype<R>>(thunk: () => RR): RR;

  isLeft(): boolean;
  left(): Either<L, empty>;
  isRight(): boolean;
  right(): Either<empty, R>;
  contains(elem: R): boolean;
  exists(p: (r: R) => boolean): boolean;
  filterOrElse<LL : $Supertype<L>>(p: (r: R) => boolean, zero: () => LL): Either<LL, R>;
  flatMap<S>(f: (r: R) => Either<L, S>): Either<L, S>;
  fold<S>(left: (l: L) => S, right: (r: R) => S): S;
  forAll(p: (r: R) => boolean): boolean;
  map<C>(f: (r: R) => C): Either<L, C>;
  forEach(cb: (r: R) => void): void;
  swap(): Either<R, L>;
  toOption(): Option<R>;
  equals(other: Either<L, R>): boolean;
  hashCode(): number;

  __hkF: () => Either<L, any>;
  __hkA: () => R;

  static __types: {
    functor: () => Functor<Either<any, any>>;
    applicative: () => Applicative<Either<any, any>>;
    eq: () => Eq<Either<any, any>>;
  };

  static left<L, R>(value: L): Either<L, R>;
  static right<L, R>(value: R): Either<L, R>;

  static map2<A1,A2,L,R>(fa1: Either<L,A1>, fa2: Either<L,A2>,
    f: (A1, A2) => R): Either<L, R>;
  static map3<A1,A2,A3,L,R>(fa1: Either<L,A1>, fa2: Either<L,A2>, fa3: Either<L,A3>,
    f: (A1, A2, A3) => R): Either<L, R>;
  static map4<A1,A2,A3,A4,L,R>(
    fa1: Either<L,A1>, fa2: Either<L,A2>, fa3: Either<L,A3>, fa4: Either<L,A4>,
    f: (A1, A2, A3, A4) => R): Either<L, R>;
  static map5<A1,A2,A3,A4,A5,L,R>(
    fa1: Either<L,A1>, fa2: Either<L,A2>, fa3: Either<L,A3>, fa4: Either<L,A4>, fa5: Either<L,A5>,
    f: (A1, A2, A3, A4, A5) => R): Either<L, R>;
  static map6<A1,A2,A3,A4,A5,A6,L,R>(
    fa1: Either<L,A1>, fa2: Either<L,A2>, fa3: Either<L,A3>, fa4: Either<L,A4>, fa5: Either<L,A5>, fa6: Either<L,A6>,
    f: (A1, A2, A3, A4, A5, A6) => R): Either<L, R>;
}

declare export function Left<L>(value: L): Either<L, empty>;
declare export function Right<R>(value: R): Either<empty, R>;

export type EitherK<L, R> = HK<Either<L, any>, R>;

declare export class EitherInstances<L> {
  eqv(lh: Either<L, any>, rh: Either<L, any>): boolean;
  pure<A>(a: A): Either<L, A>;
  unit(): Either<L, void>;
  ap<A, B>(fa: EitherK<L, A>, ff: EitherK<L, (a: A) => B>): Either<L, B>;
  map<A, B>(fa: EitherK<L, A>, f: (a: A) => B): Either<L, B>;
  map2<A, B, Z>(fa: EitherK<L, A>, fb: EitherK<L, B>, f: (a: A, b: B) => Z): Either<L, Z>;
  product<A, B>(fa: EitherK<L, A>, fb: EitherK<L, B>): Either<L, [A, B]>;

  static global: EitherInstances<any>;
}
