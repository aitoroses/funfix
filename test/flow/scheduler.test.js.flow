/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import {
  Scheduler,
  GlobalScheduler,
  TestScheduler,
  ExecutionModel,
  Cancelable,
  Duration
} from "../../src/funfix"

const s0: Scheduler = Scheduler.global()
const s1: GlobalScheduler = Scheduler.global()
const s2: GlobalScheduler = new GlobalScheduler()
const s3: GlobalScheduler = new GlobalScheduler(true)

const time1: number = s3.currentTimeMillis()
const r1: void = s3.execute(() => {})
const r2: void = s3.reportFailure("error")

const c11: Cancelable = s3.scheduleOnce(10, () => {})
const c12: Cancelable = s3.scheduleOnce(Duration.millis(10), () => {})

const c21: Cancelable = s3.scheduleAtFixedRate(10, 10, () => {})
const c22: Cancelable = s3.scheduleAtFixedRate(Duration.millis(10), Duration.millis(10), () => {})

const c31: Cancelable = s3.scheduleWithFixedDelay(10, 10, () => {})
const c32: Cancelable = s3.scheduleWithFixedDelay(Duration.millis(10), Duration.millis(10), () => {})

const test1: TestScheduler = new TestScheduler()
const test2: TestScheduler = new TestScheduler(ExecutionModel.alwaysAsync(), (error: any) => {})
const test3: TestScheduler = new TestScheduler(ExecutionModel.synchronous())
const test4: TestScheduler = new TestScheduler(ExecutionModel.batched(128))

const time2: number = test4.currentTimeMillis()
const errors: Array<any> = test4.triggeredFailures()
const finished: boolean = test4.hasTasksLeft()

const num1: number = test4.tick()
const num2: number = test4.tick(1000)
const num3: number = test4.tick(Duration.seconds(1))

const equals: boolean = ExecutionModel.alwaysAsync().equals(ExecutionModel.synchronous())
const hash: number = ExecutionModel.alwaysAsync().hashCode()
