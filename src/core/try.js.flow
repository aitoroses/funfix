/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import { HK, Applicative, Functor, Eq } from "../types"
import { Option } from "./option"
import { Either } from "./either"

declare export class Try<+A> {
  get(): A;
  getOrElse<AA : $Supertype<A>>(fallback: AA): AA;
  getOrElseL<AA : $Supertype<A>>(thunk: () => AA): AA;
  orElse<AA : $Supertype<A>>(fallback: Try<AA>): Try<AA>;
  orElseL<AA : $Supertype<A>>(thunk: () => Try<AA>): Try<AA>;
  orNull(): A | null;

  isSuccess(): boolean;
  isFailure(): boolean;
  failed(): Try<any>;
  fold<R>(failure: (error: any) => R, success: (a: A) => R): R;
  filter(p: (a: A) => boolean): Try<A>;
  flatMap<B>(f: (a: A) => Try<B>): Try<B>;
  chain<B>(f: (a: A) => Try<B>): Try<B>;
  map<B>(f: (a: A) => B): Try<B>;
  forEach(cb: (a: A) => void): void;
  recover(f: (error: any) => A): Try<A>;
  recoverWith(f: (error: any) => Try<A>): Try<A>;
  toOption(): Option<A>;
  toEither(): Either<any, A>;
  equals(that: Try<A>): boolean;
  hashCode(): number;

  __hkF: () => Try<any>;
  __hkA: () => A;

  static __types: {
    functor: () => Functor<Try<any>>,
    applicative: () => Applicative<Try<any>>,
    eq: () => Eq<Try<any>>
  };

  static of<A>(thunk: () => A): Try<A>;
  static pure<A>(value: A): Try<A>;
  static success<A>(value: A): Try<A>;
  static failure<A>(e: any): Try<A>;

  static map2<A1,A2,R>(fa1: Try<A1>, fa2: Try<A2>,
    f: (A1, A2) => R): Try<R>;
  static map3<A1,A2,A3,R>(
    fa1: Try<A1>, fa2: Try<A2>, fa3: Try<A3>,
    f: (A1, A2, A3) => R): Try<R>;
  static map4<A1,A2,A3,A4,R>(
    fa1: Try<A1>, fa2: Try<A2>, fa3: Try<A3>, fa4: Try<A4>,
    f: (A1, A2, A3, A4) => R): Try<R>;
  static map5<A1,A2,A3,A4,A5,R>(
    fa1: Try<A1>, fa2: Try<A2>, fa3: Try<A3>, fa4: Try<A4>, fa5: Try<A5>,
    f: (A1, A2, A3, A4, A5) => R): Try<R>;
  static map6<A1,A2,A3,A4,A5,A6,R>(
    fa1: Try<A1>, fa2: Try<A2>, fa3: Try<A3>, fa4: Try<A4>, fa5: Try<A5>, fa6: Try<A6>,
    f: (A1, A2, A3, A4, A5, A6) => R): Try<R>
}

declare export function Success<A>(value: A): Try<A>;
declare export function Failure(e: any): Try<empty>;

export type TryK<A> = HK<Try<any>, A>;

declare export class TryInstances {
  eqv(lh: Try<any>, rh: Try<any>): boolean;
  pure<A>(a: A): Try<A>;
  unit(): Try<void>;
  ap<A, B>(fa: TryK<A>, ff: TryK<(a: A) => B>): Try<B>;
  map<A, B>(fa: TryK<A>, f: (a: A) => B): Try<B>;
  map2<A, B, Z>(fa: TryK<A>, fb: TryK<B>, f: (a: A, b: B) => Z): Try<Z>;
  product<A, B>(fa: TryK<A>, fb: TryK<B>): Try<[A, B]>;

  static global: TryInstances;
}
